version: "3.9"
services:
    db:
        image: postgres
        restart: always
        env_file:
            - ./.env
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        ports:
            - "${POSTGRES_PORT}:${POSTGRES_PORT}"
        volumes:
            - pgdata:/var/lib/postgresql/data
        networks:
            - network
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 5s
            timeout: 5s
            retries: 5
            start_period: 1s

    fetch:
        hostname: fetch
        build:
            dockerfile: ./fetch/Dockerfile
        restart: always
        env_file:
            - ./.env
        ports:
            - ${BACKEND_PORT}:${BACKEND_PORT}
        networks:
            - network
        healthcheck:
            test: curl -sSf http://localhost:${BACKEND_PORT}/health
            interval: 60s
            retries: 5
            start_period: 5s
            timeout: 1s
        depends_on:
            db:
                condition: service_healthy
            model:
                condition: service_healthy
        develop:
            watch:
                - action: rebuild
                  path: ./fetch/pkg

    front:
        build:
            dockerfile: ./front/Dockerfile
        restart: always
        env_file:
            - ./.env
        ports:
            - ${FRONT_PORT}:${FRONT_PORT}
        networks:
            - network
        depends_on:
            db:
                condition: service_healthy
            fetch:
                condition: service_healthy

    model:
        hostname: model
        build:
            dockerfile: ./model/Dockerfile
        restart: always
        env_file:
            - ./.env
        ports:
            - ${MODEL_PORT}:${MODEL_PORT}
        networks:
            - network
        healthcheck:
            test: curl -sSf http://localhost:${MODEL_PORT}/health
            interval: 60s
            retries: 5
            start_period: 5s
            timeout: 1s

networks:
    network:
        driver: bridge

volumes:
    pgdata:
